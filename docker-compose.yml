version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ecomate-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ecomate
      POSTGRES_PASSWORD: ecomate123
      POSTGRES_DB: ecomate_db
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ecomate']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ecomate-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: ecomate-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecomate-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://ecomate:ecomate123@postgres:5432/ecomate_db?schema=public
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-min-32-chars-dev
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-min-32-chars-dev
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY_ID: minioadmin
      S3_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET_NAME: ecomate-dev
      S3_PUBLIC_URL: http://localhost:9000
      # Telegram Bot (optional - uncomment and configure to enable)
      # TELEGRAM_BOT_TOKEN: your-bot-token-from-botfather
      # TELEGRAM_WEBHOOK_URL: https://your-domain.com/v1/telegram/webhook
      # TELEGRAM_WEBHOOK_SECRET: your-random-secret-token
    ports:
      - '3000:3000'
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
    command: npm run start:dev

volumes:
  postgres_data:
  redis_data:
  minio_data: