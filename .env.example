# App Configuration
NODE_ENV=development
PORT=3000
HOST=0.0.0.0

# Database (Railway PostgreSQL)
DATABASE_URL=postgresql://user:password@host:5432/database

# Redis Configuration
# Primary connection string - REQUIRED for BullMQ job queue
REDIS_URL=redis://localhost:6379

# Optional: Individual components (for local development reference only)
# Railway/Cloud deployments: Only REDIS_URL is needed (BullMQ parses it automatically)
# These individual vars are NOT required when REDIS_URL is set:
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=
REDIS_TOKEN=                         # Optional - only for Upstash REST API (not used by BullMQ)

# JWT Authentication
# Generate với: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
JWT_SECRET=w4+Khh/Lf6W9H4Ru55veqtfUzM18rqEVa+Cca/G5tGE=
JWT_EXPIRES_IN=7d
JWT_REFRESH_SECRET=vejNf3Pew4BatL62cWulTnSVCqwGoYVYGylV0azU4tI=
JWT_REFRESH_EXPIRES_IN=30d

# Cloudflare R2 Storage (S3-compatible)
S3_ENDPOINT=https://<ACCOUNT_ID>.r2.cloudflarestorage.com
S3_REGION=auto
S3_ACCESS_KEY_ID=your-access-key-id
S3_SECRET_ACCESS_KEY=your-secret-access-key
S3_BUCKET_NAME=ecomate-dev
S3_PUBLIC_URL=https://<ACCOUNT_ID>.r2.cloudflarestorage.com/ecomate-dev

# Cloudflare Worker AI (Translation)
CLOUDFLARE_WORKER_AI_URL=https://ecomate-translator.<your-subdomain>.workers.dev
CLOUDFLARE_WORKER_AI_TOKEN=                    # Optional - API token for authentication
CLOUDFLARE_ACCOUNT_ID=<your-account-id>
TRANSLATION_CACHE_TTL=2592000                  # Cache TTL in seconds (30 days default)

# CORS Origins
CORS_ORIGINS=http://localhost:3000,http://localhost:3001
# Production (Railway + Vercel):
# CORS_ORIGINS=https://your-frontend.vercel.app,https://admin.yourdomain.com

# Logging (Optional - có default values)
LOG_LEVEL=info                       # error, warn, info, debug, verbose
LOG_PRETTY=true                      # Pretty print logs in development

# Email Service (Resend)
RESEND_API_KEY=re_xxxx
OWNER_EMAIL=owner@ecomate.com
EMAIL_FROM=Ecomate <no-reply@ecomatehome.com>
FRONTEND_URL=http://localhost:3001   # Frontend app URL
BACKEND_URL=http://localhost:3000    # Backend API URL for email callback links

# Telegram Bot Configuration
# Get your bot token from @BotFather on Telegram: /newbot
TELEGRAM_BOT_TOKEN=your-telegram-bot-token-here

# Webhook URL for receiving updates from Telegram (must be HTTPS in production)
TELEGRAM_WEBHOOK_URL=https://your-railway-app.railway.app/telegram/webhook

# Secret token for webhook security (IMPORTANT: Change this in production!)
#
# ⚠️ Railway/Cloud Platform Users:
# Railway does NOT execute shell commands in environment variables!
# You MUST generate the secret locally and paste the result.
#
# How to generate:
# 1. Run this in your terminal:
#    node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 2. Copy the output (a 64-character hex string)
# 3. Paste it below (or in Railway Variables UI)
#
# Default secret (CHANGE THIS IN PRODUCTION):
TELEGRAM_WEBHOOK_SECRET=7f3a8d2c1e9b4f6a0d8c7e5a3b1f9d2c4e6a8b0c2e4f6a8c0e2a4b6c8d0e2f4a

# Optional: Admin chat ID for bot error notifications
TELEGRAM_ADMIN_CHAT_ID=